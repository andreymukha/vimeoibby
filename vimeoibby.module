<?php

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function vimeoibby_field_info() {
  return array(
    'vimeo_ibby' => array(
      'label' => t('Vimeo video for ib.by'),
      'description' => t('Output vimeo video'),
      'default_widget' => 'vimeoibby_video',
      'default_formatter' => 'vimeoibby_formatter_link',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function vimeoibby_field_is_empty($item, $field) {
  return empty($item['vimeo_link']);
}

/**
 * Implements hook_field_formatter_info().
 */
function vimeoibby_field_formatter_info() {
  $formatter = array(
    'vimeoibby_formatter_link' => array(
      'label' => t('Vimeo link'),
      'field types' => array('vimeo_ibby'),
    ),
    'vimeoibby_formatter_thumbnail' => array(
      'label' => t('Vimeo thumbnail'),
      'field types' => array('vimeo_ibby'),
      'settings' => vimeoibby_default_settings_thumbnail(),
    ),
    'vimeoibby_formatter_video' => array(
      'label' => t('Vimeo video'),
      'field types' => array('vimeo_ibby'),
      'settings' => array('thumb_size' => '', )
    ),
  );
  return $formatter;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vimeoibby_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $type = $instance['display'][$view_mode]['type'];
  $settings = $display['settings'];
  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  switch($type){
    case'vimeoibby_formatter_thumbnail':
      $element['thumb_size'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['thumb_size'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      $link_types = array(
        'content' => t('Content'),
        'video' => t('Video'),
      );
      $element['image_link'] = array(
        '#title' => t('Link image to'),
        '#type' => 'select',
        '#default_value' => $settings['image_link'],
        '#empty_option' => t('Nothing'),
        '#options' => $link_types,
      );
      break;
    case'vimeoibby_formatter_video':
      $element['thumb_size'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['thumb_size'],
        '#empty_option' => t('None (original video size)'),
        '#options' => $image_styles,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function vimeoibby_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $type = $instance['display'][$view_mode]['type'];
  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  unset($image_styles['']);
  switch($type){
    case 'vimeoibby_formatter_thumbnail':
      if (isset($image_styles[$settings['thumb_size']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['thumb_size']]));
      }
      else {
        $summary[] = t('Original image');
      }
      $link_types = array(
        'content' => t('Linked to content'),
        'video' => t('Linked to video'),
      );
      if (isset($link_types[$settings['image_link']])) {
        $summary[] = $link_types[$settings['image_link']];
      }
      break;
    case 'vimeoibby_formatter_video':
      if (isset($image_styles[$settings['thumb_size']])) {
        $summary[] = t('Video size: @style', array('@style' => $image_styles[$settings['thumb_size']]));
      }
      else {
        $summary[] = t('Original video size');
      }
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Vimeo.com's default thumbnail settings.
 * @return Array
 *    Default values keyed by the setting name.
 */
function vimeoibby_default_settings_thumbnail() {
  $defaults = array(
    'thumb_size' => 'medium',
    'image_link' => '',
  );
  return $defaults;
}

/**
 * @param $vimeo_url - url on vimeo video
 * @return mixed
 */
function _vimeo_oembed($vimeo_url, $width = 800, $height = 600) {
  $oembed_url = url('http://vimeo.com/api/oembed.json', array(
    'query' => array(
      'url' => $vimeo_url,
      'width' => $width,
      'height' => $height
    )
  ));
  $response = drupal_http_request($oembed_url);
  $data = drupal_json_decode($response->data);
  return $data;
}

/**
 * Implements hook_field_formatter_view().
 */
function vimeoibby_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $width = image_style_load($display['settings']['thumb_size'])['effects'][0]['data']['width'];
  $height = image_style_load($display['settings']['thumb_size'])['effects'][0]['data']['height'];
  switch ($display['type']) {
    case 'vimeoibby_formatter_link':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p>' . l('http://vimeo.com/' . $item['vimeo_id'], 'http://vimeo.com/' . $item['vimeo_id'], array('attributes' => array('target' => '_blank'))) . '</p>';
      }
      break;

    case 'vimeoibby_formatter_thumbnail':
      foreach ($items as $delta => $item) {
        $attributes = array(
          'html' => TRUE,
          'attributes' => array('target' => '_blank')
        );
        $video = _vimeo_oembed($item['vimeo_link'], $width, $height);
        $image = theme('image', array('path' => $video['thumbnail_url']));
        $uri = entity_uri($entity_type, $entity);
        if($display['settings']['image_link'] == 'content'){
          $content = l($image, $uri['path'], $attributes);
        }elseif($display['settings']['image_link'] == 'video'){
          $content = l($image, $item['vimeo_link'], $attributes);
        }else{
          $content = $image;
        }

        $element[$delta]['#markup'] = '<p>' . $content  . '</p>';
      }
      break;

    case 'vimeoibby_formatter_video':
      foreach ($items as $delta => $item) {
        $video = _vimeo_oembed($item['vimeo_link'], $width, $height);
        $element[$delta]['#markup'] = '<p>' . $video['html'] . '</p>';
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function vimeoibby_field_widget_info() {
  return array(
    'vimeoibby_video' => array(
      'label' => t('Vimeo video'),
      'field types' => array('vimeo_ibby'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function vimeoibby_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
    'vimeo_link' => array(),
    'vimeo_id' => array(),
  );
  switch ($instance['widget']['type']) {
    case 'vimeoibby_video':
      $element['vimeo_link'] += array(
        '#title' => t('Link to Vimeo video'),
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['vimeo_link']) ? $items[$delta]['vimeo_link'] : '',
        '#size' => 128,
        '#maxlength' => 128,
        '#delta' => $delta,
        '#field_name' => $element['#field_name'],
        '#language' => $element['#language'],
      );
      $element['vimeo_id'] += array(
        '#delta' => $delta,
        '#field_name' => $element['#field_name'],
        '#language' => $element['#language'],
        '#markup' => isset($items[$delta]['vimeo_link']) ? 'Vimeo video ID: '._vimeo_oembed($items[$delta]['vimeo_link'])['video_id'] : '',
        '#element_validate' => array('insert_vimeo_id'),
      );
      break;
  }
  return $element;
}


/**
 * Convert video link to video id
 */
function insert_vimeo_id($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {
    $value = $form_state['values'][$field_name][$element['#language']][$delta];
    $vimeo_id = _vimeo_oembed($value['vimeo_link'])['video_id'];
    form_set_value($element, $vimeo_id, $form_state);
  }
}